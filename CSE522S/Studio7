1. Nayan and Zhenghan
2. Provide code io_event1.c

String entered is 'stuff' and enter key is pressed. Once ctrl+D is pressed, program quits
pi@Awaz:~/WUSTL/CSE522S/IO_event $ ./io_event1 
stuff
Len: 6, Data: stuff

Output once ctrl+d is pressed:
pi@Awaz:~/WUSTL/CSE522S/IO_event $ ./io_event1 
stuff
Len: 6, Data: stuff

Quiting....
3. Provide files under IO_select (need to update message)

Output from server when input is provided via stdin and then ctrl+D is pressed:
pi@Awaz:~/WUSTL/CSE522S/IO_event/io_select $ ./io_event_server 
stuff
Len: 6, Data: stuff

Quiting....
pi@Awaz:~/WUSTL/CSE522S/IO_event/io_select $ 

Output from server after client runs:
pi@Awaz:~/WUSTL/CSE522S/IO_event/io_select $ ./io_event_server 
New connection establised
Quiting....
pi@Awaz:~/WUSTL/CSE522S/IO_event/io_select $ 

Output from client:
pi@Awaz:~/WUSTL/CSE522S/IO_event/io_select $ ./socket_client_inet 
Message from server: Hello client!

pi@Awaz:~/WUSTL/CSE522S/IO_event/io_select $ 

4. Provide io_poll_1 contents
Client sends three messages to server. The first message has a LF. The second message
does not and the third message does have it. The server announces 'New connection
established' when a client makes connection. Server prints first message since it has
LF. But it prints second and third message together since only third message has LF. 
Once client closes FD, server closes the connection and associated FDs. It goes back
to polling in stdin. Once ctrl+D is pressed on the server side, it terminates the program.

Client output:
pi@Awaz:~/WUSTL/CSE522S/IO_event/io_poll_1 $ ./socket_client_inet_poll 
Sending to server....
pi@Awaz:~/WUSTL/CSE522S/IO_event/io_poll_1 $ 


Server output:
pi@Awaz:~/WUSTL/CSE522S/IO_event/io_poll_1 $ ./io_event_server 
Server is listening...
Accepting connection....
New connection establised
Connection accepted...
First Message to Server
Second Message to Server Third Message to Server
Closing socket connection....
asd
Len: 4, Data: asd

Quiting: 3
pi@Awaz:~/WUSTL/CSE522S/IO_event/io_poll_1 $ 

5.
Client output:
pi@Awaz:~/WUSTL/CSE522S/IO_event/io_poll_2 $ ./socket_client_inet_poll 
Sending to server....
pi@Awaz:~/WUSTL/CSE522S/IO_event/io_poll_2 $ ./socket_client_inet_poll Quit
Sending quit command to server...
pi@Awaz:~/WUSTL/CSE522S/IO_event/io_poll_2 $ 

Server output:
pi@Awaz:~/WUSTL/CSE522S/IO_event/io_poll_2 $ ./io_event_server 
Server is listening...
Accepting connection....
New connection establised
Connection accepted...
First Message to Server
Second Message to Server Third Message to Server
Closing connection....
asd
Len: 4, Data: asd

Removing stdin from pooling: 3
Accepting connection....
New connection establised
Connection accepted...
Terminating program...
pi@Awaz:~/WUSTL/CSE522S/IO_event/io_poll_2 $ 

6.
With level trigger, epoll always sees input and keeps returning. Pressed ctrl+C to terminate.
Polling....
Data ready..Number of events: 1
Polling....
Data ready..Number of events: 1
Polling....
Data ready..Number of events: 1
Polling....
Data ready..Number of events: 1
Polling....
Data ready..Num^C
pi@Awaz:~/WUSTL/CSE522S/IO_event $ 


With edge trigger, it returns once and then blocks on polling for more input.
pi@Awaz:~/WUSTL/CSE522S/IO_event $ ./io_event_epoll_edge 
Polling....
asd
Data ready..Number of events: 1
Polling....


